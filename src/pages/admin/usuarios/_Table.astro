---
import { asc, eq } from 'drizzle-orm'

import { Api, Error } from '~/enums'
import type { CustomError, User } from '~/types'
import db from '~/db'
import { organizationPersonRoleTable, organizationTable, personTable, roleTable } from '~/db/schema'
import { handleErrorFromServer } from '~/utils'
import { verifyPermission } from '~/utils/verify-permission'
import DataTable from './_Table'

let data: any = {
  organizations: [],
  users: [],
  roles: [],
}
let error: CustomError = null
if (Astro.locals.userTokenError) {
  error = handleErrorFromServer(Astro.locals.userTokenError)
} else {
  const permissionVerification = await verifyPermission(Astro.locals.roleId, Api.USER_ALL)
  if (!permissionVerification.isSuccess) {
    error = handleErrorFromServer(permissionVerification.error)
  } else {
    try {
      /* ↓ Users */
      data.users = await db
        .select({
          id: personTable.id,
          firstName: personTable.firstName,
          lastName: personTable.lastName,
          email: personTable.email,
          isActive: personTable.isActive,
        })
        .from(personTable)
        .orderBy(asc(personTable.lastName))
    } catch {
      if (import.meta.env.DEV) {
        console.error('Error en DB. Obtención de usuarios.')
      }
      error = handleErrorFromServer(Error.DB)
    }
    try {
      /* ↓ Organizations */
      data.organizations = await db
        .select({
          id: organizationTable.id,
          title: organizationTable.title,
        })
        .from(organizationTable)
        .orderBy(asc(organizationTable.title))
    } catch {
      if (import.meta.env.DEV) {
        console.error('Error en DB. Obtención de organizaciones.')
      }
      error = handleErrorFromServer(Error.DB)
    }
    try {
      /* ↓ Roles */
      data.roles = await db
        .select({ id: roleTable.id, title: roleTable.title })
        .from(roleTable)
        .orderBy(asc(roleTable.title))
    } catch {
      if (import.meta.env.DEV) {
        console.error('Error en DB. Obtención de roles.')
      }
      error = handleErrorFromServer(Error.DB)
    }
    let relations: any[]
    try {
      relations = await db
        .select({
          organizationId: organizationTable.id,
          organizationTitle: organizationTable.title,
          personId: organizationPersonRoleTable.personId,
          roleId: organizationPersonRoleTable.roleId,
          roleTitle: roleTable.title,
          isVisible: organizationPersonRoleTable.isVisible,
        })
        .from(organizationTable)
        .innerJoin(
          organizationPersonRoleTable,
          eq(organizationTable.id, organizationPersonRoleTable.organizationId),
        )
        .innerJoin(roleTable, eq(organizationPersonRoleTable.roleId, roleTable.id))
        .orderBy(asc(organizationTable.title), asc(roleTable.title))
    } catch {
      if (import.meta.env.DEV) {
        console.error('Error en DB. Obtención de organizationUserRole.')
      }
      error = handleErrorFromServer(Error.DB)
    }
    data.users.forEach((user: any) => {
      user.relations = relations
        .filter((item: any) => item.personId === user.id)
        .map((item: any) => ({
          organizationId: item.organizationId,
          organizationTitle: item.organizationTitle,
          roleId: item.roleId,
          roleTitle: item.roleTitle,
          isVisible: item.isVisible,
        }))
    })
  }
}
---

<DataTable client:only="solid-js" data={data} error={error} />
