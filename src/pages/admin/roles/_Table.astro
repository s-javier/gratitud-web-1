---
import { asc, eq } from 'drizzle-orm'

import { Api, Error } from '~/enums'
import type { CustomError } from '~/types'
import db from '~/db'
import { permissionTable, rolePermissionTable, roleTable } from '~/db/schema'
import { handleErrorFromServer } from '~/utils'
import { verifyPermission } from '~/utils/verify-permission'
import DataTable from './_Table'

let data: any = {
  roles: [],
  permissions: [],
}
let error: CustomError = null
if (Astro.locals.userTokenError) {
  if (import.meta.env.DEV) {
    console.error('Problema con el token de usuario en la obtención de roles.')
  }
  error = handleErrorFromServer(Astro.locals.userTokenError)
} else {
  const permissionVerification = await verifyPermission(Astro.locals.roleId, Api.ROLE_ALL)
  if (!permissionVerification.isSuccess) {
    if (import.meta.env.DEV) {
      console.error('Problema con el permiso del usuario en la obtención de roles.')
    }
    error = handleErrorFromServer(permissionVerification.error)
  } else {
    /******************************/
    try {
      /* ↓ Roles */
      data.roles = await db
        .select({ id: roleTable.id, title: roleTable.title })
        .from(roleTable)
        .orderBy(asc(roleTable.title))
    } catch {
      if (import.meta.env.DEV) {
        console.error('Error en DB. Obtención de roles.')
      }
      error = handleErrorFromServer(Error.DB)
    }
    try {
      /* ↓ Permissions */
      data.permissions = await db
        .select({
          id: permissionTable.id,
          type: permissionTable.type,
          path: permissionTable.path,
        })
        .from(permissionTable)
        .orderBy(asc(permissionTable.type), asc(permissionTable.path))
    } catch {
      if (import.meta.env.DEV) {
        console.error('Error en DB. Obtención de permisos.')
      }
      error = handleErrorFromServer(Error.DB)
    }
    let rolePermission: any[]
    try {
      rolePermission = await db
        .select({
          roleId: rolePermissionTable.roleId,
          permissionId: permissionTable.id,
          permissionPath: permissionTable.path,
          permissionType: permissionTable.type,
          sort: rolePermissionTable.sort,
        })
        .from(permissionTable)
        .innerJoin(rolePermissionTable, eq(permissionTable.id, rolePermissionTable.permissionId))
    } catch {
      if (import.meta.env.DEV) {
        console.error('Error en DB. Obtención de rolePermission.')
      }
      error = handleErrorFromServer(Error.DB)
    }
    data.roles.forEach((role: any) => {
      role.permissions = {
        view: rolePermission
          .filter((item: any) => item.roleId === role.id && item.permissionType === 'view')
          .map((item: any) => ({
            permissionId: item.permissionId,
            permissionPath: item.permissionPath,
            sort: item.sort,
          })),
        api: rolePermission
          .filter((item: any) => item.roleId === role.id && item.permissionType === 'api')
          .map((item: any) => ({
            permissionId: item.permissionId,
            permissionPath: item.permissionPath,
          })),
      }
    })
  }
}
---

<DataTable client:only="solid-js" data={data} error={error} />
